import java.nio.file.Paths;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

import java.io.*;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import org.apache.commons.io.FileUtils;

/**
 * This terminal application creates an Apache Lucene index in a folder and adds files into this index
 * based on the input of the user.
 */
public class LuceneTest {

  public static void main(String[] args) throws IOException, ParseException
  {
	  //Get file
	  String str = "";
	  try {
		   str = FileUtils.readFileToString(new File("C:/Users/ahoff_000/Desktop/test.html"));
		   System.out.println(str);
		 } catch (IOException e) {
		    e.printStackTrace();
		}
	  
	  //Find beginning and of string
	  Pattern p = Pattern.compile("\\btortoise monopoly\\b");
	  Matcher m = p.matcher(str);
	  m.find();
	  int pre_start = m.start() - 1;
	  int pre_end = m.start() - 1;
	  int post_start = m.end() + 1;
	  int post_end = m.end() + 1;
	  
	  //Move past any spaces
	  while(str.charAt(pre_start) == ' ')
	  {
		  pre_start--;
		  pre_end--;
	  }
	  while(str.charAt(post_start) == ' ')
	  {
		  pre_start++;
		  pre_end++;
	  }
	  
	  //Count of words added
	  int count = 0;
	  
	  //Get 3 strings before
	  while(pre_start >= 0 && count < 3)
	  {
		  if(pre_start == 0 || str.charAt(pre_start) == ' ')
		  {
			  System.out.println(str.substring(pre_start, pre_end));
			  count++;
		  }
		  
	  }
	  
	  
	  //Get 3 strings after
	  
	  
	  /*
	  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	  StandardAnalyzer analyzer = new StandardAnalyzer();
	  
	  //Index the files
	  Indexer fileIndexer = new Indexer(analyzer);
	  String indexLocation = fileIndexer.getFiles(br);
	  
	  //Get query from user
	  String query = "Where is the Louvre located?";
	  
	  //Create templates
	  ArrayList<String> templates = new ArrayList<String>();
	  ArrayList<Double> weights = new ArrayList<Double>();
	  TemplateSearcher.getTemplates(query,templates,weights);	 
	  
	  //Array list for storing the files from each *individual* search
	  ArrayList<Document> foundDocs;
	  //Array list storing each *individual* template (one search at a time)
	  ArrayList<String> search_query = new ArrayList<String>();
	  search_query.add("");
	  
	  //Array list containing the returned document
	  ArrayList<String> docs = new ArrayList<String>();
	  //Corresponds to 'docs', stores the associated template
	  ArrayList<String> doc_templates = new ArrayList<String>();
	  //Corresponds to 'docs', stores the associated weight
	  ArrayList<Double> doc_weights = new ArrayList<Double>();
	  
	  //Search the files
	  for(int i = 0; i < templates.size(); i++)
	  {
		  search_query.set(0,templates.get(i)); 
		  foundDocs = TemplateSearcher.SearchFiles(search_query, indexLocation, analyzer);
		  for(int j = 0; j < foundDocs.size(); i++)
		  {
			  docs.add(foundDocs.get(j).get("path"));
			  doc_templates.add(templates.get(i));
			  doc_weights.add(weights.get(i));
		  }
	  }
	  
	  */
	  //Get n-grams
	  //Combine and weight n-grams
	  //Reweight n-grams based on question rules
	  //Rank n-grams
	  //Tile n-grams
	  //Re-rank n-grams
	  //Print results
  }
}